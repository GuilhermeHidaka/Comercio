unit uCadastroProdutos;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtCtrls,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.VCLUI.Wait, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, FireDAC.Phys.FBDef, FireDAC.Phys.IBBase, FireDAC.Phys.FB,
  Vcl.Mask, Vcl.DBCtrls, Vcl.Grids, Vcl.DBGrids;

type
  TfrmCadastroProdutos = class(TForm)
    pnlCenter: TPanel;
    pnlMidTop: TPanel;
    pnlTop2: TPanel;
    pnlMidFooter: TPanel;
    lblNomeTela: TLabel;
    pnlMid: TPanel;
    pnlButtons: TPanel;
    btnSalvar: TBitBtn;
    btnIncluir: TBitBtn;
    btnModificar: TBitBtn;
    btnExcluir: TBitBtn;
    btnCancelar: TBitBtn;
    pnlDados: TPanel;
    pnlProCod: TPanel;
    pnlDescricaoProduto: TPanel;
    pnlCusto: TPanel;
    pnlVenda: TPanel;
    dsProdutos: TDataSource;
    lblCodigo: TLabel;
    edtdbCodigoProduto: TDBEdit;
    lblDescricao: TLabel;
    edtdbDescricaoProduto: TDBEdit;
    lblCusto: TLabel;
    lblVenda: TLabel;
    edtdbCusto: TDBEdit;
    edtdbVenda: TDBEdit;
    pnlLucro: TPanel;
    pnlEstoque: TPanel;
    lblEstoque: TLabel;
    edtdbEstoque: TDBEdit;
    lblLucro: TLabel;
    edtdbLucro: TDBEdit;
    btnCalcLucro: TButton;
    lblBuscarProdutos: TLabel;
    edtBuscarProdutos: TEdit;
    cboFiltroProdutos: TComboBox;
    btnVoltarCadastroProdutos: TBitBtn;
    DBgridProdutos: TDBGrid;
    ConexaoCadastro: TFDConnection;
    TabelaProdutos: TFDQuery;
    fbClient: TFDPhysFBDriverLink;
    TabelaProdutosCOD_PRODUTO: TIntegerField;
    TabelaProdutosNOME_PRODUTO: TStringField;
    TabelaProdutosCUSTO_PRODUTO: TSingleField;
    TabelaProdutosVENDA_PRODUTO: TSingleField;
    TabelaProdutosLUCRO_PRODUTO: TSingleField;
    TabelaProdutosESTOQUE_PRODUTO: TIntegerField;
    SpeedButton2: TSpeedButton;
    procedure btnFinalizarClick(Sender: TObject);
    procedure btnHomeClick(Sender: TObject);
    procedure btnCalcLucroClick(Sender: TObject);
    procedure btnIncluirClick(Sender: TObject);

    procedure FormCreate(Sender: TObject);
    procedure btnModificarClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnSalvarClick(Sender: TObject);
    procedure edtdbDescricaoProdutoChange(Sender: TObject);
    procedure dbGridProdutosCellClick(Column: TColumn);
    procedure edtdbEstoqueChange(Sender: TObject);
    procedure edtdbCustoChange(Sender: TObject);
    procedure edtdbVendaChange(Sender: TObject);
    procedure btnVoltarCadastroProdutosClick(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
    procedure edtdbDescricaoProdutoKeyPress(Sender: TObject; var Key: Char);
    procedure edtdbCustoKeyPress(Sender: TObject; var Key: Char);
    procedure edtdbVendaKeyPress(Sender: TObject; var Key: Char);
    procedure edtdbEstoqueKeyPress(Sender: TObject; var Key: Char);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmCadastroProdutos: TfrmCadastroProdutos;

implementation

{$R *.dfm}

uses uCadastro, uCadastroClientes, uCompras;

procedure TfrmCadastroProdutos.btnCalcLucroClick(Sender: TObject);
var
  n: double;
begin
  if (edtdbCusto.Text = '') or (edtdbVenda.Text = '') then
    MessageDlg('Os campos Custo e Venda devem estar preenchidos', mtError,
      [TMsgDlgBtn.mbOK], 0)
  else if (edtdbCusto.Text <> '') and (edtdbVenda.Text <> '') then
    n := StrToFloat(edtdbVenda.Text);
  n := n - StrToFloat(edtdbCusto.Text);
  edtdbLucro.Text := FloatToStr(n);

end;

procedure TfrmCadastroProdutos.btnCancelarClick(Sender: TObject);
begin
  TabelaProdutos.Cancel;
  btnIncluir.Enabled := True;
  btnSalvar.Enabled := False;
  edtdbDescricaoProduto.Enabled := False;
  edtdbEstoque.Enabled := False;
  edtdbCusto.Enabled := False;
  edtdbVenda.Enabled := False;
  btnIncluir.Enabled := True;
  btnExcluir.Enabled := True;

  // Utilizando função Qry.Cancel para cancelar o registro que estejasendo inserido porém não gravado
end;

procedure TfrmCadastroProdutos.btnExcluirClick(Sender: TObject);
begin
  if MessageDlg('Confirma exclusão ?', mtConfirmation, [mbYes, mbNo], 0) = mrYes
  then
    TabelaProdutos.Delete;
  btnSalvar.Enabled := False;
  // Utilizando função Qry.Delete para excluir determinado registro setado no RowSelect ou o próximo do dbGrid
end;

procedure TfrmCadastroProdutos.btnFinalizarClick(Sender: TObject);
begin
  Application.Terminate;
end;

procedure TfrmCadastroProdutos.btnHomeClick(Sender: TObject);
begin
  frmCadastroProdutos.Hide;
  frmCadastro.Show;
end;

procedure TfrmCadastroProdutos.btnIncluirClick(Sender: TObject);
begin

  TabelaProdutos.Insert;
  btnIncluir.Enabled := False;
  // btnSalvar.Enabled:=True;
  edtdbDescricaoProduto.Enabled := True;
  edtdbCusto.Enabled := True;
  edtdbVenda.Enabled := True;
  edtdbEstoque.Enabled := True;
  // Liberação dos campos para inserção de valor apenas após apertar o botão de incluir (btnIncluir)
  DBgridProdutos.Enabled := False;
  // Não permite clicar no dbgrid ativando o clear para os camps edtDB enquanto não clicar no botão btnSalvar
  btnModificar.Enabled := False;
  btnExcluir.Enabled := False;
end;

procedure TfrmCadastroProdutos.btnModificarClick(Sender: TObject);
begin
  TabelaProdutos.Edit;
  // utilizando função Qry.Edit para editar registro já salvo pela função Qry.Post
  // teste
  edtdbDescricaoProduto.Enabled := True;
  edtdbCusto.Enabled := True;
  edtdbVenda.Enabled := True;
  btnIncluir.Enabled := False;
  btnExcluir.Enabled := False;
  DBgridProdutos.Enabled := False;

end;

procedure TfrmCadastroProdutos.btnSalvarClick(Sender: TObject);
begin
  if MessageDlg('Estoque incial deve ser = 0',TMsgDlgType.mtError,[TMsgDlgBtn.mbOK,TMsgDlgBtn.mbCancel],0)=MB_OK then

  TabelaProdutos.Post;
  ConexaoCadastro.Commit;
  // para gravar no banco de dados todos os registros da Qry (TabelaClientes)
  btnIncluir.Enabled := True;
  btnSalvar.Enabled := False;
  // Voltar enabled incluir
  edtdbDescricaoProduto.Enabled := False;
  edtdbEstoque.Enabled := False;
  edtdbCusto.Enabled := False;
  edtdbVenda.Enabled := False;
  // Voltar Enabled padrão de não inclusão ou alteração

  // Volta condição do clique em celular do dbGrid
  btnExcluir.Enabled := True;
  btnModificar.Enabled := True;
end;

procedure TfrmCadastroProdutos.btnVoltarCadastroProdutosClick(Sender: TObject);
begin
  frmCadastroProdutos.Hide;
  frmCadastro.Show;
  TabelaProdutos.ApplyUpdates;
end;

procedure TfrmCadastroProdutos.dbGridProdutosCellClick(Column: TColumn);
begin
  edtdbDescricaoProduto.Text := '';
  edtdbEstoque.Text := '';
  edtdbCusto.Text := '';
  edtdbVenda.Text := '';
  edtdbLucro.Text := '';
  // tentando

end;

procedure TfrmCadastroProdutos.edtdbCustoChange(Sender: TObject);
begin
  edtdbCodigoProduto.Text := '0';
  if (edtdbDescricaoProduto.Text <> '') and (edtdbEstoque.Text <> '') and
    (edtdbCusto.Text <> '') and (edtdbVenda.Text <> '') then
    btnSalvar.Enabled := True;
  if (edtdbDescricaoProduto.Text = '') or (edtdbEstoque.Text = '') or
    (edtdbCusto.Text = '') or (edtdbVenda.Text = '') then
    btnSalvar.Enabled := False;
  // A cada mudança de campo no clique, verifica se todos já foram preenchidos para validar a liberação do botão salvar.
end;

procedure TfrmCadastroProdutos.edtdbCustoKeyPress(Sender: TObject;
  var Key: Char);
begin
  if Key = #13 then
    Perform(Wm_NextDlgCtl, 0, 0);
end;

procedure TfrmCadastroProdutos.edtdbDescricaoProdutoChange(Sender: TObject);
begin
  if (edtdbDescricaoProduto.Text <> '') and (edtdbEstoque.Text <> '') and
    (edtdbCusto.Text <> '') and (edtdbVenda.Text <> '') then
    btnSalvar.Enabled := True;
  if (edtdbDescricaoProduto.Text = '') or (edtdbEstoque.Text = '') or
    (edtdbCusto.Text = '') or (edtdbVenda.Text = '') then
    btnSalvar.Enabled := False;
end;

procedure TfrmCadastroProdutos.edtdbDescricaoProdutoKeyPress(Sender: TObject;
  var Key: Char);
begin
  if Key = #13 then
    Perform(Wm_NextDlgCtl, 0, 0);
end;

procedure TfrmCadastroProdutos.edtdbEstoqueChange(Sender: TObject);
begin
  if (edtdbDescricaoProduto.Text <> '') and (edtdbEstoque.Text <> '') and
    (edtdbCusto.Text <> '') and (edtdbVenda.Text <> '') then
    btnSalvar.Enabled := True;
  if (edtdbDescricaoProduto.Text = '') or (edtdbEstoque.Text = '') or
    (edtdbCusto.Text = '') or (edtdbVenda.Text = '') then
    btnSalvar.Enabled := False;
end;

procedure TfrmCadastroProdutos.edtdbEstoqueKeyPress(Sender: TObject;
  var Key: Char);
begin
  if Key = #13 then
    Perform(Wm_NextDlgCtl, 0, 0);
end;

procedure TfrmCadastroProdutos.edtdbVendaChange(Sender: TObject);
begin
  if (edtdbDescricaoProduto.Text <> '') and (edtdbEstoque.Text <> '') and
    (edtdbCusto.Text <> '') and (edtdbVenda.Text <> '') then
    btnSalvar.Enabled := True;
  if (edtdbDescricaoProduto.Text = '') or (edtdbEstoque.Text = '') or
    (edtdbCusto.Text = '') or (edtdbVenda.Text = '') then
    btnSalvar.Enabled := False;
end;

procedure TfrmCadastroProdutos.edtdbVendaKeyPress(Sender: TObject;
  var Key: Char);
begin
  if Key = #13 then
    Perform(Wm_NextDlgCtl, 0, 0);
end;

procedure TfrmCadastroProdutos.FormCreate(Sender: TObject);
begin

  edtdbCodigoProduto.Enabled := False;
  ConexaoCadastro.Connected := True;
  TabelaProdutos.Open();
  btnSalvar.Enabled := False;
  cboFiltroProdutos.ItemIndex := 0;
  // Vetor definição incial combo box

  edtdbDescricaoProduto.Enabled := False;
  edtdbEstoque.Enabled := False;
  edtdbCusto.Enabled := False;
  edtdbVenda.Enabled := False;
  // não permitir inserção sem clicar no botão de adicionar
  // .
end;

procedure TfrmCadastroProdutos.SpeedButton2Click(Sender: TObject);
begin
  if cboFiltroProdutos.ItemIndex = 1 then
    TabelaProdutos.Locate('NOME_PRODUTO', edtBuscarProdutos.Text,
      [loPartialKey, loCaseInsensitive]);

  if cboFiltroProdutos.ItemIndex = 0 then
    TabelaProdutos.Locate('COD_PRODUTO', edtBuscarProdutos.Text,
      [loPartialKey, loCaseInsensitive]);
  btnSalvar.Enabled := False;
  // Qry.Locate('COLUNA',componente.propriedade,[loPartialKey,loCaseInsensitive]);
  // loCaseInsensitive %consulta
  // igual do buscar clientes
  // inclusive o buscar clientes está apenas como buscar em suas referências, não como BuscarProdutos nessa tela.
end;

end.
